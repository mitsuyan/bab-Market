{
  "version": 3,
  "sources": ["../../../jest-mock/build/index.js"],
  "sourcesContent": ["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', {\r\n  value: true\r\n});\r\nexports.spyOn = exports.mocked = exports.fn = exports.ModuleMocker = void 0;\r\n\r\nfunction _defineProperty(obj, key, value) {\r\n  if (key in obj) {\r\n    Object.defineProperty(obj, key, {\r\n      value: value,\r\n      enumerable: true,\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n  } else {\r\n    obj[key] = value;\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n/* eslint-disable local/ban-types-eventually, local/prefer-rest-params-eventually */\r\n\r\n/**\r\n * Possible types of a MockFunctionResult.\r\n * 'return': The call completed by returning normally.\r\n * 'throw': The call completed by throwing a value.\r\n * 'incomplete': The call has not completed yet. This is possible if you read\r\n *               the  mock function result from within the mock function itself\r\n *               (or a function called by the mock function).\r\n */\r\n\r\n/**\r\n * Represents the result of a single call to a mock function.\r\n */\r\n// see https://github.com/Microsoft/TypeScript/issues/25215\r\nconst MOCK_CONSTRUCTOR_NAME = 'mockConstructor';\r\nconst FUNCTION_NAME_RESERVED_PATTERN = /[\\s!-\\/:-@\\[-`{-~]/;\r\nconst FUNCTION_NAME_RESERVED_REPLACE = new RegExp(\r\n  FUNCTION_NAME_RESERVED_PATTERN.source,\r\n  'g'\r\n);\r\nconst RESERVED_KEYWORDS = new Set([\r\n  'arguments',\r\n  'await',\r\n  'break',\r\n  'case',\r\n  'catch',\r\n  'class',\r\n  'const',\r\n  'continue',\r\n  'debugger',\r\n  'default',\r\n  'delete',\r\n  'do',\r\n  'else',\r\n  'enum',\r\n  'eval',\r\n  'export',\r\n  'extends',\r\n  'false',\r\n  'finally',\r\n  'for',\r\n  'function',\r\n  'if',\r\n  'implements',\r\n  'import',\r\n  'in',\r\n  'instanceof',\r\n  'interface',\r\n  'let',\r\n  'new',\r\n  'null',\r\n  'package',\r\n  'private',\r\n  'protected',\r\n  'public',\r\n  'return',\r\n  'static',\r\n  'super',\r\n  'switch',\r\n  'this',\r\n  'throw',\r\n  'true',\r\n  'try',\r\n  'typeof',\r\n  'var',\r\n  'void',\r\n  'while',\r\n  'with',\r\n  'yield'\r\n]);\r\n\r\nfunction matchArity(fn, length) {\r\n  let mockConstructor;\r\n\r\n  switch (length) {\r\n    case 1:\r\n      mockConstructor = function (_a) {\r\n        return fn.apply(this, arguments);\r\n      };\r\n\r\n      break;\r\n\r\n    case 2:\r\n      mockConstructor = function (_a, _b) {\r\n        return fn.apply(this, arguments);\r\n      };\r\n\r\n      break;\r\n\r\n    case 3:\r\n      mockConstructor = function (_a, _b, _c) {\r\n        return fn.apply(this, arguments);\r\n      };\r\n\r\n      break;\r\n\r\n    case 4:\r\n      mockConstructor = function (_a, _b, _c, _d) {\r\n        return fn.apply(this, arguments);\r\n      };\r\n\r\n      break;\r\n\r\n    case 5:\r\n      mockConstructor = function (_a, _b, _c, _d, _e) {\r\n        return fn.apply(this, arguments);\r\n      };\r\n\r\n      break;\r\n\r\n    case 6:\r\n      mockConstructor = function (_a, _b, _c, _d, _e, _f) {\r\n        return fn.apply(this, arguments);\r\n      };\r\n\r\n      break;\r\n\r\n    case 7:\r\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g) {\r\n        return fn.apply(this, arguments);\r\n      };\r\n\r\n      break;\r\n\r\n    case 8:\r\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h) {\r\n        return fn.apply(this, arguments);\r\n      };\r\n\r\n      break;\r\n\r\n    case 9:\r\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h, _i) {\r\n        return fn.apply(this, arguments);\r\n      };\r\n\r\n      break;\r\n\r\n    default:\r\n      mockConstructor = function () {\r\n        return fn.apply(this, arguments);\r\n      };\r\n\r\n      break;\r\n  }\r\n\r\n  return mockConstructor;\r\n}\r\n\r\nfunction getObjectType(value) {\r\n  return Object.prototype.toString.apply(value).slice(8, -1);\r\n}\r\n\r\nfunction getType(ref) {\r\n  const typeName = getObjectType(ref);\r\n\r\n  if (\r\n    typeName === 'Function' ||\r\n    typeName === 'AsyncFunction' ||\r\n    typeName === 'GeneratorFunction'\r\n  ) {\r\n    return 'function';\r\n  } else if (Array.isArray(ref)) {\r\n    return 'array';\r\n  } else if (typeName === 'Object') {\r\n    return 'object';\r\n  } else if (\r\n    typeName === 'Number' ||\r\n    typeName === 'String' ||\r\n    typeName === 'Boolean' ||\r\n    typeName === 'Symbol'\r\n  ) {\r\n    return 'constant';\r\n  } else if (\r\n    typeName === 'Map' ||\r\n    typeName === 'WeakMap' ||\r\n    typeName === 'Set'\r\n  ) {\r\n    return 'collection';\r\n  } else if (typeName === 'RegExp') {\r\n    return 'regexp';\r\n  } else if (ref === undefined) {\r\n    return 'undefined';\r\n  } else if (ref === null) {\r\n    return 'null';\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction isReadonlyProp(object, prop) {\r\n  if (\r\n    prop === 'arguments' ||\r\n    prop === 'caller' ||\r\n    prop === 'callee' ||\r\n    prop === 'name' ||\r\n    prop === 'length'\r\n  ) {\r\n    const typeName = getObjectType(object);\r\n    return (\r\n      typeName === 'Function' ||\r\n      typeName === 'AsyncFunction' ||\r\n      typeName === 'GeneratorFunction'\r\n    );\r\n  }\r\n\r\n  if (\r\n    prop === 'source' ||\r\n    prop === 'global' ||\r\n    prop === 'ignoreCase' ||\r\n    prop === 'multiline'\r\n  ) {\r\n    return getObjectType(object) === 'RegExp';\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nclass ModuleMocker {\r\n  /**\r\n   * @see README.md\r\n   * @param global Global object of the test environment, used to create\r\n   * mocks\r\n   */\r\n  constructor(global) {\r\n    _defineProperty(this, '_environmentGlobal', void 0);\r\n\r\n    _defineProperty(this, '_mockState', void 0);\r\n\r\n    _defineProperty(this, '_mockConfigRegistry', void 0);\r\n\r\n    _defineProperty(this, '_spyState', void 0);\r\n\r\n    _defineProperty(this, '_invocationCallCounter', void 0);\r\n\r\n    this._environmentGlobal = global;\r\n    this._mockState = new WeakMap();\r\n    this._mockConfigRegistry = new WeakMap();\r\n    this._spyState = new Set();\r\n    this._invocationCallCounter = 1;\r\n  }\r\n\r\n  _getSlots(object) {\r\n    if (!object) {\r\n      return [];\r\n    }\r\n\r\n    const slots = new Set();\r\n    const EnvObjectProto = this._environmentGlobal.Object.prototype;\r\n    const EnvFunctionProto = this._environmentGlobal.Function.prototype;\r\n    const EnvRegExpProto = this._environmentGlobal.RegExp.prototype; // Also check the builtins in the current context as they leak through\r\n    // core node modules.\r\n\r\n    const ObjectProto = Object.prototype;\r\n    const FunctionProto = Function.prototype;\r\n    const RegExpProto = RegExp.prototype; // Properties of Object.prototype, Function.prototype and RegExp.prototype\r\n    // are never reported as slots\r\n\r\n    while (\r\n      object != null &&\r\n      object !== EnvObjectProto &&\r\n      object !== EnvFunctionProto &&\r\n      object !== EnvRegExpProto &&\r\n      object !== ObjectProto &&\r\n      object !== FunctionProto &&\r\n      object !== RegExpProto\r\n    ) {\r\n      const ownNames = Object.getOwnPropertyNames(object);\r\n\r\n      for (let i = 0; i < ownNames.length; i++) {\r\n        const prop = ownNames[i];\r\n\r\n        if (!isReadonlyProp(object, prop)) {\r\n          const propDesc = Object.getOwnPropertyDescriptor(object, prop);\r\n\r\n          if ((propDesc !== undefined && !propDesc.get) || object.__esModule) {\r\n            slots.add(prop);\r\n          }\r\n        }\r\n      }\r\n\r\n      object = Object.getPrototypeOf(object);\r\n    }\r\n\r\n    return Array.from(slots);\r\n  }\r\n\r\n  _ensureMockConfig(f) {\r\n    let config = this._mockConfigRegistry.get(f);\r\n\r\n    if (!config) {\r\n      config = this._defaultMockConfig();\r\n\r\n      this._mockConfigRegistry.set(f, config);\r\n    }\r\n\r\n    return config;\r\n  }\r\n\r\n  _ensureMockState(f) {\r\n    let state = this._mockState.get(f);\r\n\r\n    if (!state) {\r\n      state = this._defaultMockState();\r\n\r\n      this._mockState.set(f, state);\r\n    }\r\n\r\n    if (state.calls.length > 0) {\r\n      state.lastCall = state.calls[state.calls.length - 1];\r\n    }\r\n\r\n    return state;\r\n  }\r\n\r\n  _defaultMockConfig() {\r\n    return {\r\n      mockImpl: undefined,\r\n      mockName: 'jest.fn()',\r\n      specificMockImpls: [],\r\n      specificReturnValues: []\r\n    };\r\n  }\r\n\r\n  _defaultMockState() {\r\n    return {\r\n      calls: [],\r\n      instances: [],\r\n      invocationCallOrder: [],\r\n      results: []\r\n    };\r\n  }\r\n\r\n  _makeComponent(metadata, restore) {\r\n    if (metadata.type === 'object') {\r\n      return new this._environmentGlobal.Object();\r\n    } else if (metadata.type === 'array') {\r\n      return new this._environmentGlobal.Array();\r\n    } else if (metadata.type === 'regexp') {\r\n      return new this._environmentGlobal.RegExp('');\r\n    } else if (\r\n      metadata.type === 'constant' ||\r\n      metadata.type === 'collection' ||\r\n      metadata.type === 'null' ||\r\n      metadata.type === 'undefined'\r\n    ) {\r\n      return metadata.value;\r\n    } else if (metadata.type === 'function') {\r\n      const prototype =\r\n        (metadata.members &&\r\n          metadata.members.prototype &&\r\n          metadata.members.prototype.members) ||\r\n        {};\r\n\r\n      const prototypeSlots = this._getSlots(prototype);\r\n\r\n      const mocker = this;\r\n      const mockConstructor = matchArity(function (...args) {\r\n        const mockState = mocker._ensureMockState(f);\r\n\r\n        const mockConfig = mocker._ensureMockConfig(f);\r\n\r\n        mockState.instances.push(this);\r\n        mockState.calls.push(args); // Create and record an \"incomplete\" mock result immediately upon\r\n        // calling rather than waiting for the mock to return. This avoids\r\n        // issues caused by recursion where results can be recorded in the\r\n        // wrong order.\r\n\r\n        const mockResult = {\r\n          type: 'incomplete',\r\n          value: undefined\r\n        };\r\n        mockState.results.push(mockResult);\r\n        mockState.invocationCallOrder.push(mocker._invocationCallCounter++); // Will be set to the return value of the mock if an error is not thrown\r\n\r\n        let finalReturnValue; // Will be set to the error that is thrown by the mock (if it throws)\r\n\r\n        let thrownError; // Will be set to true if the mock throws an error. The presence of a\r\n        // value in `thrownError` is not a 100% reliable indicator because a\r\n        // function could throw a value of undefined.\r\n\r\n        let callDidThrowError = false;\r\n\r\n        try {\r\n          // The bulk of the implementation is wrapped in an immediately\r\n          // executed arrow function so the return value of the mock function\r\n          // can be easily captured and recorded, despite the many separate\r\n          // return points within the logic.\r\n          finalReturnValue = (() => {\r\n            if (this instanceof f) {\r\n              // This is probably being called as a constructor\r\n              prototypeSlots.forEach(slot => {\r\n                // Copy prototype methods to the instance to make\r\n                // it easier to interact with mock instance call and\r\n                // return values\r\n                if (prototype[slot].type === 'function') {\r\n                  // @ts-expect-error no index signature\r\n                  const protoImpl = this[slot]; // @ts-expect-error no index signature\r\n\r\n                  this[slot] = mocker.generateFromMetadata(prototype[slot]); // @ts-expect-error no index signature\r\n\r\n                  this[slot]._protoImpl = protoImpl;\r\n                }\r\n              }); // Run the mock constructor implementation\r\n\r\n              const mockImpl = mockConfig.specificMockImpls.length\r\n                ? mockConfig.specificMockImpls.shift()\r\n                : mockConfig.mockImpl;\r\n              return mockImpl && mockImpl.apply(this, arguments);\r\n            } // If mockImplementationOnce()/mockImplementation() is last set,\r\n            // implementation use the mock\r\n\r\n            let specificMockImpl = mockConfig.specificMockImpls.shift();\r\n\r\n            if (specificMockImpl === undefined) {\r\n              specificMockImpl = mockConfig.mockImpl;\r\n            }\r\n\r\n            if (specificMockImpl) {\r\n              return specificMockImpl.apply(this, arguments);\r\n            } // Otherwise use prototype implementation\r\n\r\n            if (f._protoImpl) {\r\n              return f._protoImpl.apply(this, arguments);\r\n            }\r\n\r\n            return undefined;\r\n          })();\r\n        } catch (error) {\r\n          // Store the thrown error so we can record it, then re-throw it.\r\n          thrownError = error;\r\n          callDidThrowError = true;\r\n          throw error;\r\n        } finally {\r\n          // Record the result of the function.\r\n          // NOTE: Intentionally NOT pushing/indexing into the array of mock\r\n          //       results here to avoid corrupting results data if mockClear()\r\n          //       is called during the execution of the mock.\r\n          mockResult.type = callDidThrowError ? 'throw' : 'return';\r\n          mockResult.value = callDidThrowError ? thrownError : finalReturnValue;\r\n        }\r\n\r\n        return finalReturnValue;\r\n      }, metadata.length || 0);\r\n\r\n      const f = this._createMockFunction(metadata, mockConstructor);\r\n\r\n      f._isMockFunction = true;\r\n\r\n      f.getMockImplementation = () => this._ensureMockConfig(f).mockImpl;\r\n\r\n      if (typeof restore === 'function') {\r\n        this._spyState.add(restore);\r\n      }\r\n\r\n      this._mockState.set(f, this._defaultMockState());\r\n\r\n      this._mockConfigRegistry.set(f, this._defaultMockConfig());\r\n\r\n      Object.defineProperty(f, 'mock', {\r\n        configurable: false,\r\n        enumerable: true,\r\n        get: () => this._ensureMockState(f),\r\n        set: val => this._mockState.set(f, val)\r\n      });\r\n\r\n      f.mockClear = () => {\r\n        this._mockState.delete(f);\r\n\r\n        return f;\r\n      };\r\n\r\n      f.mockReset = () => {\r\n        f.mockClear();\r\n\r\n        this._mockConfigRegistry.delete(f);\r\n\r\n        return f;\r\n      };\r\n\r\n      f.mockRestore = () => {\r\n        f.mockReset();\r\n        return restore ? restore() : undefined;\r\n      };\r\n\r\n      f.mockReturnValueOnce = (\r\n        value // next function call will return this value or default return value\r\n      ) => f.mockImplementationOnce(() => value);\r\n\r\n      f.mockResolvedValueOnce = value =>\r\n        f.mockImplementationOnce(() => Promise.resolve(value));\r\n\r\n      f.mockRejectedValueOnce = value =>\r\n        f.mockImplementationOnce(() => Promise.reject(value));\r\n\r\n      f.mockReturnValue = (\r\n        value // next function call will return specified return value or this one\r\n      ) => f.mockImplementation(() => value);\r\n\r\n      f.mockResolvedValue = value =>\r\n        f.mockImplementation(() => Promise.resolve(value));\r\n\r\n      f.mockRejectedValue = value =>\r\n        f.mockImplementation(() => Promise.reject(value));\r\n\r\n      f.mockImplementationOnce = fn => {\r\n        // next function call will use this mock implementation return value\r\n        // or default mock implementation return value\r\n        const mockConfig = this._ensureMockConfig(f);\r\n\r\n        mockConfig.specificMockImpls.push(fn);\r\n        return f;\r\n      };\r\n\r\n      f.mockImplementation = fn => {\r\n        // next function call will use mock implementation return value\r\n        const mockConfig = this._ensureMockConfig(f);\r\n\r\n        mockConfig.mockImpl = fn;\r\n        return f;\r\n      };\r\n\r\n      f.mockReturnThis = () =>\r\n        f.mockImplementation(function () {\r\n          return this;\r\n        });\r\n\r\n      f.mockName = name => {\r\n        if (name) {\r\n          const mockConfig = this._ensureMockConfig(f);\r\n\r\n          mockConfig.mockName = name;\r\n        }\r\n\r\n        return f;\r\n      };\r\n\r\n      f.getMockName = () => {\r\n        const mockConfig = this._ensureMockConfig(f);\r\n\r\n        return mockConfig.mockName || 'jest.fn()';\r\n      };\r\n\r\n      if (metadata.mockImpl) {\r\n        f.mockImplementation(metadata.mockImpl);\r\n      }\r\n\r\n      return f;\r\n    } else {\r\n      const unknownType = metadata.type || 'undefined type';\r\n      throw new Error('Unrecognized type ' + unknownType);\r\n    }\r\n  }\r\n\r\n  _createMockFunction(metadata, mockConstructor) {\r\n    let name = metadata.name;\r\n\r\n    if (!name) {\r\n      return mockConstructor;\r\n    } // Preserve `name` property of mocked function.\r\n\r\n    const boundFunctionPrefix = 'bound ';\r\n    let bindCall = ''; // if-do-while for perf reasons. The common case is for the if to fail.\r\n\r\n    if (name && name.startsWith(boundFunctionPrefix)) {\r\n      do {\r\n        name = name.substring(boundFunctionPrefix.length); // Call bind() just to alter the function name.\r\n\r\n        bindCall = '.bind(null)';\r\n      } while (name && name.startsWith(boundFunctionPrefix));\r\n    } // Special case functions named `mockConstructor` to guard for infinite\r\n    // loops.\r\n\r\n    if (name === MOCK_CONSTRUCTOR_NAME) {\r\n      return mockConstructor;\r\n    }\r\n\r\n    if (\r\n      // It's a syntax error to define functions with a reserved keyword\r\n      // as name.\r\n      RESERVED_KEYWORDS.has(name) || // It's also a syntax error to define functions with a name that starts with a number\r\n      /^\\d/.test(name)\r\n    ) {\r\n      name = '$' + name;\r\n    } // It's also a syntax error to define a function with a reserved character\r\n    // as part of it's name.\r\n\r\n    if (FUNCTION_NAME_RESERVED_PATTERN.test(name)) {\r\n      name = name.replace(FUNCTION_NAME_RESERVED_REPLACE, '$');\r\n    }\r\n\r\n    const body =\r\n      'return function ' +\r\n      name +\r\n      '() {' +\r\n      'return ' +\r\n      MOCK_CONSTRUCTOR_NAME +\r\n      '.apply(this,arguments);' +\r\n      '}' +\r\n      bindCall;\r\n    const createConstructor = new this._environmentGlobal.Function(\r\n      MOCK_CONSTRUCTOR_NAME,\r\n      body\r\n    );\r\n    return createConstructor(mockConstructor);\r\n  }\r\n\r\n  _generateMock(metadata, callbacks, refs) {\r\n    // metadata not compatible but it's the same type, maybe problem with\r\n    // overloading of _makeComponent and not _generateMock?\r\n    // @ts-expect-error\r\n    const mock = this._makeComponent(metadata);\r\n\r\n    if (metadata.refID != null) {\r\n      refs[metadata.refID] = mock;\r\n    }\r\n\r\n    this._getSlots(metadata.members).forEach(slot => {\r\n      const slotMetadata = (metadata.members && metadata.members[slot]) || {};\r\n\r\n      if (slotMetadata.ref != null) {\r\n        callbacks.push(\r\n          (function (ref) {\r\n            return () => (mock[slot] = refs[ref]);\r\n          })(slotMetadata.ref)\r\n        );\r\n      } else {\r\n        mock[slot] = this._generateMock(slotMetadata, callbacks, refs);\r\n      }\r\n    });\r\n\r\n    if (\r\n      metadata.type !== 'undefined' &&\r\n      metadata.type !== 'null' &&\r\n      mock.prototype &&\r\n      typeof mock.prototype === 'object'\r\n    ) {\r\n      mock.prototype.constructor = mock;\r\n    }\r\n\r\n    return mock;\r\n  }\r\n  /**\r\n   * @see README.md\r\n   * @param _metadata Metadata for the mock in the schema returned by the\r\n   * getMetadata method of this module.\r\n   */\r\n\r\n  generateFromMetadata(_metadata) {\r\n    const callbacks = [];\r\n    const refs = {};\r\n\r\n    const mock = this._generateMock(_metadata, callbacks, refs);\r\n\r\n    callbacks.forEach(setter => setter());\r\n    return mock;\r\n  }\r\n  /**\r\n   * @see README.md\r\n   * @param component The component for which to retrieve metadata.\r\n   */\r\n\r\n  getMetadata(component, _refs) {\r\n    const refs = _refs || new Map();\r\n    const ref = refs.get(component);\r\n\r\n    if (ref != null) {\r\n      return {\r\n        ref\r\n      };\r\n    }\r\n\r\n    const type = getType(component);\r\n\r\n    if (!type) {\r\n      return null;\r\n    }\r\n\r\n    const metadata = {\r\n      type\r\n    };\r\n\r\n    if (\r\n      type === 'constant' ||\r\n      type === 'collection' ||\r\n      type === 'undefined' ||\r\n      type === 'null'\r\n    ) {\r\n      metadata.value = component;\r\n      return metadata;\r\n    } else if (type === 'function') {\r\n      // @ts-expect-error this is a function so it has a name\r\n      metadata.name = component.name; // @ts-expect-error may be a mock\r\n\r\n      if (component._isMockFunction === true) {\r\n        // @ts-expect-error may be a mock\r\n        metadata.mockImpl = component.getMockImplementation();\r\n      }\r\n    }\r\n\r\n    metadata.refID = refs.size;\r\n    refs.set(component, metadata.refID);\r\n    let members = null; // Leave arrays alone\r\n\r\n    if (type !== 'array') {\r\n      this._getSlots(component).forEach(slot => {\r\n        if (\r\n          type === 'function' && // @ts-expect-error may be a mock\r\n          component._isMockFunction === true &&\r\n          slot.match(/^mock/)\r\n        ) {\r\n          return;\r\n        } // @ts-expect-error no index signature\r\n\r\n        const slotMetadata = this.getMetadata(component[slot], refs);\r\n\r\n        if (slotMetadata) {\r\n          if (!members) {\r\n            members = {};\r\n          }\r\n\r\n          members[slot] = slotMetadata;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (members) {\r\n      metadata.members = members;\r\n    }\r\n\r\n    return metadata;\r\n  }\r\n\r\n  isMockFunction(fn) {\r\n    return !!fn && fn._isMockFunction === true;\r\n  }\r\n\r\n  fn(implementation) {\r\n    const length = implementation ? implementation.length : 0;\r\n\r\n    const fn = this._makeComponent({\r\n      length,\r\n      type: 'function'\r\n    });\r\n\r\n    if (implementation) {\r\n      fn.mockImplementation(implementation);\r\n    }\r\n\r\n    return fn;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\n  spyOn(object, methodName, accessType) {\r\n    if (accessType) {\r\n      return this._spyOnProperty(object, methodName, accessType);\r\n    }\r\n\r\n    if (typeof object !== 'object' && typeof object !== 'function') {\r\n      throw new Error(\r\n        'Cannot spyOn on a primitive value; ' + this._typeOf(object) + ' given'\r\n      );\r\n    }\r\n\r\n    const original = object[methodName];\r\n\r\n    if (!this.isMockFunction(original)) {\r\n      if (typeof original !== 'function') {\r\n        throw new Error(\r\n          'Cannot spy the ' +\r\n            methodName +\r\n            ' property because it is not a function; ' +\r\n            this._typeOf(original) +\r\n            ' given instead'\r\n        );\r\n      }\r\n\r\n      const isMethodOwner = Object.prototype.hasOwnProperty.call(\r\n        object,\r\n        methodName\r\n      );\r\n      let descriptor = Object.getOwnPropertyDescriptor(object, methodName);\r\n      let proto = Object.getPrototypeOf(object);\r\n\r\n      while (!descriptor && proto !== null) {\r\n        descriptor = Object.getOwnPropertyDescriptor(proto, methodName);\r\n        proto = Object.getPrototypeOf(proto);\r\n      }\r\n\r\n      let mock;\r\n\r\n      if (descriptor && descriptor.get) {\r\n        const originalGet = descriptor.get;\r\n        mock = this._makeComponent(\r\n          {\r\n            type: 'function'\r\n          },\r\n          () => {\r\n            descriptor.get = originalGet;\r\n            Object.defineProperty(object, methodName, descriptor);\r\n          }\r\n        );\r\n\r\n        descriptor.get = () => mock;\r\n\r\n        Object.defineProperty(object, methodName, descriptor);\r\n      } else {\r\n        mock = this._makeComponent(\r\n          {\r\n            type: 'function'\r\n          },\r\n          () => {\r\n            if (isMethodOwner) {\r\n              object[methodName] = original;\r\n            } else {\r\n              delete object[methodName];\r\n            }\r\n          }\r\n        ); // @ts-expect-error overriding original method with a Mock\r\n\r\n        object[methodName] = mock;\r\n      }\r\n\r\n      mock.mockImplementation(function () {\r\n        return original.apply(this, arguments);\r\n      });\r\n    }\r\n\r\n    return object[methodName];\r\n  }\r\n\r\n  _spyOnProperty(obj, propertyName, accessType = 'get') {\r\n    if (typeof obj !== 'object' && typeof obj !== 'function') {\r\n      throw new Error(\r\n        'Cannot spyOn on a primitive value; ' + this._typeOf(obj) + ' given'\r\n      );\r\n    }\r\n\r\n    if (!obj) {\r\n      throw new Error(\r\n        'spyOn could not find an object to spy upon for ' + propertyName + ''\r\n      );\r\n    }\r\n\r\n    if (!propertyName) {\r\n      throw new Error('No property name supplied');\r\n    }\r\n\r\n    let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\r\n    let proto = Object.getPrototypeOf(obj);\r\n\r\n    while (!descriptor && proto !== null) {\r\n      descriptor = Object.getOwnPropertyDescriptor(proto, propertyName);\r\n      proto = Object.getPrototypeOf(proto);\r\n    }\r\n\r\n    if (!descriptor) {\r\n      throw new Error(propertyName + ' property does not exist');\r\n    }\r\n\r\n    if (!descriptor.configurable) {\r\n      throw new Error(propertyName + ' is not declared configurable');\r\n    }\r\n\r\n    if (!descriptor[accessType]) {\r\n      throw new Error(\r\n        'Property ' + propertyName + ' does not have access type ' + accessType\r\n      );\r\n    }\r\n\r\n    const original = descriptor[accessType];\r\n\r\n    if (!this.isMockFunction(original)) {\r\n      if (typeof original !== 'function') {\r\n        throw new Error(\r\n          'Cannot spy the ' +\r\n            propertyName +\r\n            ' property because it is not a function; ' +\r\n            this._typeOf(original) +\r\n            ' given instead'\r\n        );\r\n      } // @ts-expect-error: mock is assignable\r\n\r\n      descriptor[accessType] = this._makeComponent(\r\n        {\r\n          type: 'function'\r\n        },\r\n        () => {\r\n          // @ts-expect-error: mock is assignable\r\n          descriptor[accessType] = original;\r\n          Object.defineProperty(obj, propertyName, descriptor);\r\n        }\r\n      );\r\n      descriptor[accessType].mockImplementation(function () {\r\n        // @ts-expect-error\r\n        return original.apply(this, arguments);\r\n      });\r\n    }\r\n\r\n    Object.defineProperty(obj, propertyName, descriptor);\r\n    return descriptor[accessType];\r\n  }\r\n\r\n  clearAllMocks() {\r\n    this._mockState = new WeakMap();\r\n  }\r\n\r\n  resetAllMocks() {\r\n    this._mockConfigRegistry = new WeakMap();\r\n    this._mockState = new WeakMap();\r\n  }\r\n\r\n  restoreAllMocks() {\r\n    this._spyState.forEach(restore => restore());\r\n\r\n    this._spyState = new Set();\r\n  }\r\n\r\n  _typeOf(value) {\r\n    return value == null ? '' + value : typeof value;\r\n  } // the typings test helper\r\n\r\n  mocked(item, _deep = false) {\r\n    return item;\r\n  }\r\n}\r\n\r\nexports.ModuleMocker = ModuleMocker;\r\nconst JestMock = new ModuleMocker(global);\r\nconst fn = JestMock.fn.bind(JestMock);\r\nexports.fn = fn;\r\nconst spyOn = JestMock.spyOn.bind(JestMock);\r\nexports.spyOn = spyOn;\r\nconst mocked = JestMock.mocked.bind(JestMock);\r\nexports.mocked = mocked;\r\n"],
  "mappings": "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",
  "names": ["fn", "global"]
}
