{
  "version": 3,
  "sources": ["../../../estraverse/package.json", "../../../estraverse/estraverse.js"],
  "sourcesContent": ["{\r\n  \"name\": \"estraverse\",\r\n  \"description\": \"ECMAScript JS AST traversal functions\",\r\n  \"homepage\": \"https://github.com/estools/estraverse\",\r\n  \"main\": \"estraverse.js\",\r\n  \"version\": \"4.3.0\",\r\n  \"engines\": {\r\n    \"node\": \">=4.0\"\r\n  },\r\n  \"maintainers\": [\r\n    {\r\n      \"name\": \"Yusuke Suzuki\",\r\n      \"email\": \"utatane.tea@gmail.com\",\r\n      \"web\": \"http://github.com/Constellation\"\r\n    }\r\n  ],\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"http://github.com/estools/estraverse.git\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"babel-preset-env\": \"^1.6.1\",\r\n    \"babel-register\": \"^6.3.13\",\r\n    \"chai\": \"^2.1.1\",\r\n    \"espree\": \"^1.11.0\",\r\n    \"gulp\": \"^3.8.10\",\r\n    \"gulp-bump\": \"^0.2.2\",\r\n    \"gulp-filter\": \"^2.0.0\",\r\n    \"gulp-git\": \"^1.0.1\",\r\n    \"gulp-tag-version\": \"^1.3.0\",\r\n    \"jshint\": \"^2.5.6\",\r\n    \"mocha\": \"^2.1.0\"\r\n  },\r\n  \"license\": \"BSD-2-Clause\",\r\n  \"scripts\": {\r\n    \"test\": \"npm run-script lint && npm run-script unit-test\",\r\n    \"lint\": \"jshint estraverse.js\",\r\n    \"unit-test\": \"mocha --compilers js:babel-register\"\r\n  }\r\n}\r\n", "/*\r\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\r\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\r\n\r\n  Redistribution and use in source and binary forms, with or without\r\n  modification, are permitted provided that the following conditions are met:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n    * Redistributions in binary form must reproduce the above copyright\r\n      notice, this list of conditions and the following disclaimer in the\r\n      documentation and/or other materials provided with the distribution.\r\n\r\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n/*jslint vars:false, bitwise:true*/\r\n/*jshint indent:4*/\r\n/*global exports:true*/\r\n(function clone(exports) {\r\n    'use strict';\r\n\r\n    var Syntax,\r\n        VisitorOption,\r\n        VisitorKeys,\r\n        BREAK,\r\n        SKIP,\r\n        REMOVE;\r\n\r\n    function deepCopy(obj) {\r\n        var ret = {}, key, val;\r\n        for (key in obj) {\r\n            if (obj.hasOwnProperty(key)) {\r\n                val = obj[key];\r\n                if (typeof val === 'object' && val !== null) {\r\n                    ret[key] = deepCopy(val);\r\n                } else {\r\n                    ret[key] = val;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    // based on LLVM libc++ upper_bound / lower_bound\r\n    // MIT License\r\n\r\n    function upperBound(array, func) {\r\n        var diff, len, i, current;\r\n\r\n        len = array.length;\r\n        i = 0;\r\n\r\n        while (len) {\r\n            diff = len >>> 1;\r\n            current = i + diff;\r\n            if (func(array[current])) {\r\n                len = diff;\r\n            } else {\r\n                i = current + 1;\r\n                len -= diff + 1;\r\n            }\r\n        }\r\n        return i;\r\n    }\r\n\r\n    Syntax = {\r\n        AssignmentExpression: 'AssignmentExpression',\r\n        AssignmentPattern: 'AssignmentPattern',\r\n        ArrayExpression: 'ArrayExpression',\r\n        ArrayPattern: 'ArrayPattern',\r\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\r\n        AwaitExpression: 'AwaitExpression', // CAUTION: It's deferred to ES7.\r\n        BlockStatement: 'BlockStatement',\r\n        BinaryExpression: 'BinaryExpression',\r\n        BreakStatement: 'BreakStatement',\r\n        CallExpression: 'CallExpression',\r\n        CatchClause: 'CatchClause',\r\n        ClassBody: 'ClassBody',\r\n        ClassDeclaration: 'ClassDeclaration',\r\n        ClassExpression: 'ClassExpression',\r\n        ComprehensionBlock: 'ComprehensionBlock',  // CAUTION: It's deferred to ES7.\r\n        ComprehensionExpression: 'ComprehensionExpression',  // CAUTION: It's deferred to ES7.\r\n        ConditionalExpression: 'ConditionalExpression',\r\n        ContinueStatement: 'ContinueStatement',\r\n        DebuggerStatement: 'DebuggerStatement',\r\n        DirectiveStatement: 'DirectiveStatement',\r\n        DoWhileStatement: 'DoWhileStatement',\r\n        EmptyStatement: 'EmptyStatement',\r\n        ExportAllDeclaration: 'ExportAllDeclaration',\r\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\r\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\r\n        ExportSpecifier: 'ExportSpecifier',\r\n        ExpressionStatement: 'ExpressionStatement',\r\n        ForStatement: 'ForStatement',\r\n        ForInStatement: 'ForInStatement',\r\n        ForOfStatement: 'ForOfStatement',\r\n        FunctionDeclaration: 'FunctionDeclaration',\r\n        FunctionExpression: 'FunctionExpression',\r\n        GeneratorExpression: 'GeneratorExpression',  // CAUTION: It's deferred to ES7.\r\n        Identifier: 'Identifier',\r\n        IfStatement: 'IfStatement',\r\n        ImportExpression: 'ImportExpression',\r\n        ImportDeclaration: 'ImportDeclaration',\r\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\r\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\r\n        ImportSpecifier: 'ImportSpecifier',\r\n        Literal: 'Literal',\r\n        LabeledStatement: 'LabeledStatement',\r\n        LogicalExpression: 'LogicalExpression',\r\n        MemberExpression: 'MemberExpression',\r\n        MetaProperty: 'MetaProperty',\r\n        MethodDefinition: 'MethodDefinition',\r\n        ModuleSpecifier: 'ModuleSpecifier',\r\n        NewExpression: 'NewExpression',\r\n        ObjectExpression: 'ObjectExpression',\r\n        ObjectPattern: 'ObjectPattern',\r\n        Program: 'Program',\r\n        Property: 'Property',\r\n        RestElement: 'RestElement',\r\n        ReturnStatement: 'ReturnStatement',\r\n        SequenceExpression: 'SequenceExpression',\r\n        SpreadElement: 'SpreadElement',\r\n        Super: 'Super',\r\n        SwitchStatement: 'SwitchStatement',\r\n        SwitchCase: 'SwitchCase',\r\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\r\n        TemplateElement: 'TemplateElement',\r\n        TemplateLiteral: 'TemplateLiteral',\r\n        ThisExpression: 'ThisExpression',\r\n        ThrowStatement: 'ThrowStatement',\r\n        TryStatement: 'TryStatement',\r\n        UnaryExpression: 'UnaryExpression',\r\n        UpdateExpression: 'UpdateExpression',\r\n        VariableDeclaration: 'VariableDeclaration',\r\n        VariableDeclarator: 'VariableDeclarator',\r\n        WhileStatement: 'WhileStatement',\r\n        WithStatement: 'WithStatement',\r\n        YieldExpression: 'YieldExpression'\r\n    };\r\n\r\n    VisitorKeys = {\r\n        AssignmentExpression: ['left', 'right'],\r\n        AssignmentPattern: ['left', 'right'],\r\n        ArrayExpression: ['elements'],\r\n        ArrayPattern: ['elements'],\r\n        ArrowFunctionExpression: ['params', 'body'],\r\n        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.\r\n        BlockStatement: ['body'],\r\n        BinaryExpression: ['left', 'right'],\r\n        BreakStatement: ['label'],\r\n        CallExpression: ['callee', 'arguments'],\r\n        CatchClause: ['param', 'body'],\r\n        ClassBody: ['body'],\r\n        ClassDeclaration: ['id', 'superClass', 'body'],\r\n        ClassExpression: ['id', 'superClass', 'body'],\r\n        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.\r\n        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\r\n        ConditionalExpression: ['test', 'consequent', 'alternate'],\r\n        ContinueStatement: ['label'],\r\n        DebuggerStatement: [],\r\n        DirectiveStatement: [],\r\n        DoWhileStatement: ['body', 'test'],\r\n        EmptyStatement: [],\r\n        ExportAllDeclaration: ['source'],\r\n        ExportDefaultDeclaration: ['declaration'],\r\n        ExportNamedDeclaration: ['declaration', 'specifiers', 'source'],\r\n        ExportSpecifier: ['exported', 'local'],\r\n        ExpressionStatement: ['expression'],\r\n        ForStatement: ['init', 'test', 'update', 'body'],\r\n        ForInStatement: ['left', 'right', 'body'],\r\n        ForOfStatement: ['left', 'right', 'body'],\r\n        FunctionDeclaration: ['id', 'params', 'body'],\r\n        FunctionExpression: ['id', 'params', 'body'],\r\n        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.\r\n        Identifier: [],\r\n        IfStatement: ['test', 'consequent', 'alternate'],\r\n        ImportExpression: ['source'],\r\n        ImportDeclaration: ['specifiers', 'source'],\r\n        ImportDefaultSpecifier: ['local'],\r\n        ImportNamespaceSpecifier: ['local'],\r\n        ImportSpecifier: ['imported', 'local'],\r\n        Literal: [],\r\n        LabeledStatement: ['label', 'body'],\r\n        LogicalExpression: ['left', 'right'],\r\n        MemberExpression: ['object', 'property'],\r\n        MetaProperty: ['meta', 'property'],\r\n        MethodDefinition: ['key', 'value'],\r\n        ModuleSpecifier: [],\r\n        NewExpression: ['callee', 'arguments'],\r\n        ObjectExpression: ['properties'],\r\n        ObjectPattern: ['properties'],\r\n        Program: ['body'],\r\n        Property: ['key', 'value'],\r\n        RestElement: [ 'argument' ],\r\n        ReturnStatement: ['argument'],\r\n        SequenceExpression: ['expressions'],\r\n        SpreadElement: ['argument'],\r\n        Super: [],\r\n        SwitchStatement: ['discriminant', 'cases'],\r\n        SwitchCase: ['test', 'consequent'],\r\n        TaggedTemplateExpression: ['tag', 'quasi'],\r\n        TemplateElement: [],\r\n        TemplateLiteral: ['quasis', 'expressions'],\r\n        ThisExpression: [],\r\n        ThrowStatement: ['argument'],\r\n        TryStatement: ['block', 'handler', 'finalizer'],\r\n        UnaryExpression: ['argument'],\r\n        UpdateExpression: ['argument'],\r\n        VariableDeclaration: ['declarations'],\r\n        VariableDeclarator: ['id', 'init'],\r\n        WhileStatement: ['test', 'body'],\r\n        WithStatement: ['object', 'body'],\r\n        YieldExpression: ['argument']\r\n    };\r\n\r\n    // unique id\r\n    BREAK = {};\r\n    SKIP = {};\r\n    REMOVE = {};\r\n\r\n    VisitorOption = {\r\n        Break: BREAK,\r\n        Skip: SKIP,\r\n        Remove: REMOVE\r\n    };\r\n\r\n    function Reference(parent, key) {\r\n        this.parent = parent;\r\n        this.key = key;\r\n    }\r\n\r\n    Reference.prototype.replace = function replace(node) {\r\n        this.parent[this.key] = node;\r\n    };\r\n\r\n    Reference.prototype.remove = function remove() {\r\n        if (Array.isArray(this.parent)) {\r\n            this.parent.splice(this.key, 1);\r\n            return true;\r\n        } else {\r\n            this.replace(null);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    function Element(node, path, wrap, ref) {\r\n        this.node = node;\r\n        this.path = path;\r\n        this.wrap = wrap;\r\n        this.ref = ref;\r\n    }\r\n\r\n    function Controller() { }\r\n\r\n    // API:\r\n    // return property path array from root to current node\r\n    Controller.prototype.path = function path() {\r\n        var i, iz, j, jz, result, element;\r\n\r\n        function addToPath(result, path) {\r\n            if (Array.isArray(path)) {\r\n                for (j = 0, jz = path.length; j < jz; ++j) {\r\n                    result.push(path[j]);\r\n                }\r\n            } else {\r\n                result.push(path);\r\n            }\r\n        }\r\n\r\n        // root node\r\n        if (!this.__current.path) {\r\n            return null;\r\n        }\r\n\r\n        // first node is sentinel, second node is root element\r\n        result = [];\r\n        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {\r\n            element = this.__leavelist[i];\r\n            addToPath(result, element.path);\r\n        }\r\n        addToPath(result, this.__current.path);\r\n        return result;\r\n    };\r\n\r\n    // API:\r\n    // return type of current node\r\n    Controller.prototype.type = function () {\r\n        var node = this.current();\r\n        return node.type || this.__current.wrap;\r\n    };\r\n\r\n    // API:\r\n    // return array of parent elements\r\n    Controller.prototype.parents = function parents() {\r\n        var i, iz, result;\r\n\r\n        // first node is sentinel\r\n        result = [];\r\n        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {\r\n            result.push(this.__leavelist[i].node);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    // API:\r\n    // return current node\r\n    Controller.prototype.current = function current() {\r\n        return this.__current.node;\r\n    };\r\n\r\n    Controller.prototype.__execute = function __execute(callback, element) {\r\n        var previous, result;\r\n\r\n        result = undefined;\r\n\r\n        previous  = this.__current;\r\n        this.__current = element;\r\n        this.__state = null;\r\n        if (callback) {\r\n            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\r\n        }\r\n        this.__current = previous;\r\n\r\n        return result;\r\n    };\r\n\r\n    // API:\r\n    // notify control skip / break\r\n    Controller.prototype.notify = function notify(flag) {\r\n        this.__state = flag;\r\n    };\r\n\r\n    // API:\r\n    // skip child nodes of current node\r\n    Controller.prototype.skip = function () {\r\n        this.notify(SKIP);\r\n    };\r\n\r\n    // API:\r\n    // break traversals\r\n    Controller.prototype['break'] = function () {\r\n        this.notify(BREAK);\r\n    };\r\n\r\n    // API:\r\n    // remove node\r\n    Controller.prototype.remove = function () {\r\n        this.notify(REMOVE);\r\n    };\r\n\r\n    Controller.prototype.__initialize = function(root, visitor) {\r\n        this.visitor = visitor;\r\n        this.root = root;\r\n        this.__worklist = [];\r\n        this.__leavelist = [];\r\n        this.__current = null;\r\n        this.__state = null;\r\n        this.__fallback = null;\r\n        if (visitor.fallback === 'iteration') {\r\n            this.__fallback = Object.keys;\r\n        } else if (typeof visitor.fallback === 'function') {\r\n            this.__fallback = visitor.fallback;\r\n        }\r\n\r\n        this.__keys = VisitorKeys;\r\n        if (visitor.keys) {\r\n            this.__keys = Object.assign(Object.create(this.__keys), visitor.keys);\r\n        }\r\n    };\r\n\r\n    function isNode(node) {\r\n        if (node == null) {\r\n            return false;\r\n        }\r\n        return typeof node === 'object' && typeof node.type === 'string';\r\n    }\r\n\r\n    function isProperty(nodeType, key) {\r\n        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;\r\n    }\r\n\r\n    Controller.prototype.traverse = function traverse(root, visitor) {\r\n        var worklist,\r\n            leavelist,\r\n            element,\r\n            node,\r\n            nodeType,\r\n            ret,\r\n            key,\r\n            current,\r\n            current2,\r\n            candidates,\r\n            candidate,\r\n            sentinel;\r\n\r\n        this.__initialize(root, visitor);\r\n\r\n        sentinel = {};\r\n\r\n        // reference\r\n        worklist = this.__worklist;\r\n        leavelist = this.__leavelist;\r\n\r\n        // initialize\r\n        worklist.push(new Element(root, null, null, null));\r\n        leavelist.push(new Element(null, null, null, null));\r\n\r\n        while (worklist.length) {\r\n            element = worklist.pop();\r\n\r\n            if (element === sentinel) {\r\n                element = leavelist.pop();\r\n\r\n                ret = this.__execute(visitor.leave, element);\r\n\r\n                if (this.__state === BREAK || ret === BREAK) {\r\n                    return;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (element.node) {\r\n\r\n                ret = this.__execute(visitor.enter, element);\r\n\r\n                if (this.__state === BREAK || ret === BREAK) {\r\n                    return;\r\n                }\r\n\r\n                worklist.push(sentinel);\r\n                leavelist.push(element);\r\n\r\n                if (this.__state === SKIP || ret === SKIP) {\r\n                    continue;\r\n                }\r\n\r\n                node = element.node;\r\n                nodeType = node.type || element.wrap;\r\n                candidates = this.__keys[nodeType];\r\n                if (!candidates) {\r\n                    if (this.__fallback) {\r\n                        candidates = this.__fallback(node);\r\n                    } else {\r\n                        throw new Error('Unknown node type ' + nodeType + '.');\r\n                    }\r\n                }\r\n\r\n                current = candidates.length;\r\n                while ((current -= 1) >= 0) {\r\n                    key = candidates[current];\r\n                    candidate = node[key];\r\n                    if (!candidate) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (Array.isArray(candidate)) {\r\n                        current2 = candidate.length;\r\n                        while ((current2 -= 1) >= 0) {\r\n                            if (!candidate[current2]) {\r\n                                continue;\r\n                            }\r\n                            if (isProperty(nodeType, candidates[current])) {\r\n                                element = new Element(candidate[current2], [key, current2], 'Property', null);\r\n                            } else if (isNode(candidate[current2])) {\r\n                                element = new Element(candidate[current2], [key, current2], null, null);\r\n                            } else {\r\n                                continue;\r\n                            }\r\n                            worklist.push(element);\r\n                        }\r\n                    } else if (isNode(candidate)) {\r\n                        worklist.push(new Element(candidate, key, null, null));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    Controller.prototype.replace = function replace(root, visitor) {\r\n        var worklist,\r\n            leavelist,\r\n            node,\r\n            nodeType,\r\n            target,\r\n            element,\r\n            current,\r\n            current2,\r\n            candidates,\r\n            candidate,\r\n            sentinel,\r\n            outer,\r\n            key;\r\n\r\n        function removeElem(element) {\r\n            var i,\r\n                key,\r\n                nextElem,\r\n                parent;\r\n\r\n            if (element.ref.remove()) {\r\n                // When the reference is an element of an array.\r\n                key = element.ref.key;\r\n                parent = element.ref.parent;\r\n\r\n                // If removed from array, then decrease following items' keys.\r\n                i = worklist.length;\r\n                while (i--) {\r\n                    nextElem = worklist[i];\r\n                    if (nextElem.ref && nextElem.ref.parent === parent) {\r\n                        if  (nextElem.ref.key < key) {\r\n                            break;\r\n                        }\r\n                        --nextElem.ref.key;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.__initialize(root, visitor);\r\n\r\n        sentinel = {};\r\n\r\n        // reference\r\n        worklist = this.__worklist;\r\n        leavelist = this.__leavelist;\r\n\r\n        // initialize\r\n        outer = {\r\n            root: root\r\n        };\r\n        element = new Element(root, null, null, new Reference(outer, 'root'));\r\n        worklist.push(element);\r\n        leavelist.push(element);\r\n\r\n        while (worklist.length) {\r\n            element = worklist.pop();\r\n\r\n            if (element === sentinel) {\r\n                element = leavelist.pop();\r\n\r\n                target = this.__execute(visitor.leave, element);\r\n\r\n                // node may be replaced with null,\r\n                // so distinguish between undefined and null in this place\r\n                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\r\n                    // replace\r\n                    element.ref.replace(target);\r\n                }\r\n\r\n                if (this.__state === REMOVE || target === REMOVE) {\r\n                    removeElem(element);\r\n                }\r\n\r\n                if (this.__state === BREAK || target === BREAK) {\r\n                    return outer.root;\r\n                }\r\n                continue;\r\n            }\r\n\r\n            target = this.__execute(visitor.enter, element);\r\n\r\n            // node may be replaced with null,\r\n            // so distinguish between undefined and null in this place\r\n            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {\r\n                // replace\r\n                element.ref.replace(target);\r\n                element.node = target;\r\n            }\r\n\r\n            if (this.__state === REMOVE || target === REMOVE) {\r\n                removeElem(element);\r\n                element.node = null;\r\n            }\r\n\r\n            if (this.__state === BREAK || target === BREAK) {\r\n                return outer.root;\r\n            }\r\n\r\n            // node may be null\r\n            node = element.node;\r\n            if (!node) {\r\n                continue;\r\n            }\r\n\r\n            worklist.push(sentinel);\r\n            leavelist.push(element);\r\n\r\n            if (this.__state === SKIP || target === SKIP) {\r\n                continue;\r\n            }\r\n\r\n            nodeType = node.type || element.wrap;\r\n            candidates = this.__keys[nodeType];\r\n            if (!candidates) {\r\n                if (this.__fallback) {\r\n                    candidates = this.__fallback(node);\r\n                } else {\r\n                    throw new Error('Unknown node type ' + nodeType + '.');\r\n                }\r\n            }\r\n\r\n            current = candidates.length;\r\n            while ((current -= 1) >= 0) {\r\n                key = candidates[current];\r\n                candidate = node[key];\r\n                if (!candidate) {\r\n                    continue;\r\n                }\r\n\r\n                if (Array.isArray(candidate)) {\r\n                    current2 = candidate.length;\r\n                    while ((current2 -= 1) >= 0) {\r\n                        if (!candidate[current2]) {\r\n                            continue;\r\n                        }\r\n                        if (isProperty(nodeType, candidates[current])) {\r\n                            element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));\r\n                        } else if (isNode(candidate[current2])) {\r\n                            element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));\r\n                        } else {\r\n                            continue;\r\n                        }\r\n                        worklist.push(element);\r\n                    }\r\n                } else if (isNode(candidate)) {\r\n                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));\r\n                }\r\n            }\r\n        }\r\n\r\n        return outer.root;\r\n    };\r\n\r\n    function traverse(root, visitor) {\r\n        var controller = new Controller();\r\n        return controller.traverse(root, visitor);\r\n    }\r\n\r\n    function replace(root, visitor) {\r\n        var controller = new Controller();\r\n        return controller.replace(root, visitor);\r\n    }\r\n\r\n    function extendCommentRange(comment, tokens) {\r\n        var target;\r\n\r\n        target = upperBound(tokens, function search(token) {\r\n            return token.range[0] > comment.range[0];\r\n        });\r\n\r\n        comment.extendedRange = [comment.range[0], comment.range[1]];\r\n\r\n        if (target !== tokens.length) {\r\n            comment.extendedRange[1] = tokens[target].range[0];\r\n        }\r\n\r\n        target -= 1;\r\n        if (target >= 0) {\r\n            comment.extendedRange[0] = tokens[target].range[1];\r\n        }\r\n\r\n        return comment;\r\n    }\r\n\r\n    function attachComments(tree, providedComments, tokens) {\r\n        // At first, we should calculate extended comment ranges.\r\n        var comments = [], comment, len, i, cursor;\r\n\r\n        if (!tree.range) {\r\n            throw new Error('attachComments needs range information');\r\n        }\r\n\r\n        // tokens array is empty, we attach comments to tree as 'leadingComments'\r\n        if (!tokens.length) {\r\n            if (providedComments.length) {\r\n                for (i = 0, len = providedComments.length; i < len; i += 1) {\r\n                    comment = deepCopy(providedComments[i]);\r\n                    comment.extendedRange = [0, tree.range[0]];\r\n                    comments.push(comment);\r\n                }\r\n                tree.leadingComments = comments;\r\n            }\r\n            return tree;\r\n        }\r\n\r\n        for (i = 0, len = providedComments.length; i < len; i += 1) {\r\n            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\r\n        }\r\n\r\n        // This is based on John Freeman's implementation.\r\n        cursor = 0;\r\n        traverse(tree, {\r\n            enter: function (node) {\r\n                var comment;\r\n\r\n                while (cursor < comments.length) {\r\n                    comment = comments[cursor];\r\n                    if (comment.extendedRange[1] > node.range[0]) {\r\n                        break;\r\n                    }\r\n\r\n                    if (comment.extendedRange[1] === node.range[0]) {\r\n                        if (!node.leadingComments) {\r\n                            node.leadingComments = [];\r\n                        }\r\n                        node.leadingComments.push(comment);\r\n                        comments.splice(cursor, 1);\r\n                    } else {\r\n                        cursor += 1;\r\n                    }\r\n                }\r\n\r\n                // already out of owned node\r\n                if (cursor === comments.length) {\r\n                    return VisitorOption.Break;\r\n                }\r\n\r\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\r\n                    return VisitorOption.Skip;\r\n                }\r\n            }\r\n        });\r\n\r\n        cursor = 0;\r\n        traverse(tree, {\r\n            leave: function (node) {\r\n                var comment;\r\n\r\n                while (cursor < comments.length) {\r\n                    comment = comments[cursor];\r\n                    if (node.range[1] < comment.extendedRange[0]) {\r\n                        break;\r\n                    }\r\n\r\n                    if (node.range[1] === comment.extendedRange[0]) {\r\n                        if (!node.trailingComments) {\r\n                            node.trailingComments = [];\r\n                        }\r\n                        node.trailingComments.push(comment);\r\n                        comments.splice(cursor, 1);\r\n                    } else {\r\n                        cursor += 1;\r\n                    }\r\n                }\r\n\r\n                // already out of owned node\r\n                if (cursor === comments.length) {\r\n                    return VisitorOption.Break;\r\n                }\r\n\r\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\r\n                    return VisitorOption.Skip;\r\n                }\r\n            }\r\n        });\r\n\r\n        return tree;\r\n    }\r\n\r\n    exports.version = require('./package.json').version;\r\n    exports.Syntax = Syntax;\r\n    exports.traverse = traverse;\r\n    exports.replace = replace;\r\n    exports.attachComments = attachComments;\r\n    exports.VisitorKeys = VisitorKeys;\r\n    exports.VisitorOption = VisitorOption;\r\n    exports.Controller = Controller;\r\n    exports.cloneEnvironment = function () { return clone({}); };\r\n\r\n    return exports;\r\n}(exports));\r\n/* vim: set sw=4 ts=4 et tw=80 : */\r\n"],
  "mappings": "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",
  "names": ["exports", "replace", "result", "path", "traverse", "element", "key", "comment"]
}
