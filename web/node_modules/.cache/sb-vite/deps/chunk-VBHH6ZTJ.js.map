{
  "version": 3,
  "sources": ["../../../@mdx-js/react/lib/index.js"],
  "sourcesContent": ["/**\r\n * @typedef {import('react').ReactNode} ReactNode\r\n * @typedef {import('mdx/types.js').MDXComponents} Components\r\n *\r\n * @typedef Props\r\n *   Configuration.\r\n * @property {Components | MergeComponents | null | undefined} [components]\r\n *   Mapping of names for JSX components to React components.\r\n * @property {boolean | null | undefined} [disableParentContext=false]\r\n *   Turn off outer component context.\r\n * @property {ReactNode | null | undefined} [children]\r\n *   Children.\r\n *\r\n * @callback MergeComponents\r\n *   Custom merge function.\r\n * @param {Components} currentComponents\r\n *   Current components from the context.\r\n * @returns {Components}\r\n *   Merged components.\r\n */\r\n\r\nimport React from 'react'\r\n\r\n/**\r\n * @type {import('react').Context<Components>}\r\n * @deprecated\r\n *   This export is marked as a legacy feature.\r\n *   That means it’s no longer recommended for use as it might be removed\r\n *   in a future major release.\r\n *\r\n *   Please use `useMDXComponents` to get context based components and\r\n *   `MDXProvider` to set context based components instead.\r\n */\r\nexport const MDXContext = React.createContext({})\r\n\r\n/**\r\n * @param {import('react').ComponentType<any>} Component\r\n * @deprecated\r\n *   This export is marked as a legacy feature.\r\n *   That means it’s no longer recommended for use as it might be removed\r\n *   in a future major release.\r\n *\r\n *   Please use `useMDXComponents` to get context based components instead.\r\n */\r\nexport function withMDXComponents(Component) {\r\n  return boundMDXComponent\r\n\r\n  /**\r\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\r\n   * @returns {JSX.Element}\r\n   */\r\n  function boundMDXComponent(props) {\r\n    const allComponents = useMDXComponents(props.components)\r\n    return React.createElement(Component, {...props, allComponents})\r\n  }\r\n}\r\n\r\n/**\r\n * Get current components from the MDX Context.\r\n *\r\n * @param {Components | MergeComponents | null | undefined} [components]\r\n *   Additional components to use or a function that takes the current\r\n *   components and filters/merges/changes them.\r\n * @returns {Components}\r\n *   Current components.\r\n */\r\nexport function useMDXComponents(components) {\r\n  const contextComponents = React.useContext(MDXContext)\r\n\r\n  // Memoize to avoid unnecessary top-level context changes\r\n  return React.useMemo(() => {\r\n    // Custom merge via a function prop\r\n    if (typeof components === 'function') {\r\n      return components(contextComponents)\r\n    }\r\n\r\n    return {...contextComponents, ...components}\r\n  }, [contextComponents, components])\r\n}\r\n\r\n/** @type {Components} */\r\nconst emptyObject = {}\r\n\r\n/**\r\n * Provider for MDX context\r\n *\r\n * @param {Props} props\r\n * @returns {JSX.Element}\r\n */\r\nexport function MDXProvider({components, children, disableParentContext}) {\r\n  /** @type {Components} */\r\n  let allComponents\r\n\r\n  if (disableParentContext) {\r\n    allComponents =\r\n      typeof components === 'function'\r\n        ? components({})\r\n        : components || emptyObject\r\n  } else {\r\n    allComponents = useMDXComponents(components)\r\n  }\r\n\r\n  return React.createElement(\r\n    MDXContext.Provider,\r\n    {value: allComponents},\r\n    children\r\n  )\r\n}\r\n"],
  "mappings": ";;;;;;;;AAqBA,mBAAkB;AAYX,IAAM,aAAa,aAAAA,QAAM,cAAc,CAAC,CAAC;AAWzC,SAAS,kBAAkB,WAAW;AAC3C,SAAO;AAMP,WAAS,kBAAkB,OAAO;AAChC,UAAM,gBAAgB,iBAAiB,MAAM,UAAU;AACvD,WAAO,aAAAA,QAAM,cAAc,WAAW,EAAC,GAAG,OAAO,cAAa,CAAC;AAAA,EACjE;AACF;AAWO,SAAS,iBAAiB,YAAY;AAC3C,QAAM,oBAAoB,aAAAA,QAAM,WAAW,UAAU;AAGrD,SAAO,aAAAA,QAAM,QAAQ,MAAM;AAEzB,QAAI,OAAO,eAAe,YAAY;AACpC,aAAO,WAAW,iBAAiB;AAAA,IACrC;AAEA,WAAO,EAAC,GAAG,mBAAmB,GAAG,WAAU;AAAA,EAC7C,GAAG,CAAC,mBAAmB,UAAU,CAAC;AACpC;AAGA,IAAM,cAAc,CAAC;AAQd,SAAS,YAAY,EAAC,YAAY,UAAU,qBAAoB,GAAG;AAExE,MAAI;AAEJ,MAAI,sBAAsB;AACxB,oBACE,OAAO,eAAe,aAClB,WAAW,CAAC,CAAC,IACb,cAAc;AAAA,EACtB,OAAO;AACL,oBAAgB,iBAAiB,UAAU;AAAA,EAC7C;AAEA,SAAO,aAAAA,QAAM;AAAA,IACX,WAAW;AAAA,IACX,EAAC,OAAO,cAAa;AAAA,IACrB;AAAA,EACF;AACF;",
  "names": ["React"]
}
