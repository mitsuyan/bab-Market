openapi: 3.0.0
info:
  title: baby-motsu API
  version: 1.0.0
servers:
  - url: http://api.example.com/v1
paths:
  /api/users/{userId}/mypage:
    get:
      summary: マイページ情報（プロフィール、評価、出品商品一覧）を取得する。
      parameters:
        - $ref: '#/components/parameters/UserIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/MypageResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/users/personal:
    get:
      summary: 個人情報（氏名、生年月日、住所）を取得する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '200':
          $ref: '#/components/responses/PersonalUserInfoResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    patch:
      summary: 個人情報（氏名、生年月日、住所）の更新する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      requestBody:
        $ref: '#/components/requestBodies/PersonalUserInfoRequest'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/users/profile:
    get:
      summary: プロフィール情報（ニックネーム、プロフィール画像、自己紹介）を取得する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '200':
          $ref: '#/components/responses/ProfileUserInfoResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    patch:
      summary: プロフィール情報（ニックネーム、プロフィール画像、自己紹介）の更新する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      requestBody:
        $ref: '#/components/requestBodies/ProfileUserInfoRequest'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/auth/login:
    post:
      summary: ユーザーがメールアドレスとパスワードを使用してログインする。
      requestBody:
        $ref: '#/components/requestBodies/LoginRequest'
      responses:
        '200':
          $ref: '#/components/responses/LoginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/auth/logout:
    post:
      summary: ユーザーが現在のセッションからログアウトする。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '401':
          $ref: '#/components/responses/BadRequestError'

  /api/auth/signup:
    post:
      summary: 新しいユーザーがアカウントを作成する。
      requestBody:
        $ref: '#/components/requestBodies/SignupRequest'
      responses:
        '201':
          $ref: '#/components/responses/LoginResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/auth/update-credentials:
    patch:
      summary: ユーザーがメールアドレスとパスワードを同時に更新する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      requestBody:
        $ref: '#/components/requestBodies/CredentialRequest'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/shipping-addresses/list:
    get:
      summary: ユーザーの登録されているすべての配送先を取得する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '200':
          $ref: '#/components/responses/AllShippingAddressesResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/shipping-addresses:
    post:
      summary: 新しい配送先を追加する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      requestBody:
        $ref: '#/components/requestBodies/ShippingAddressRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreatedResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/shipping-addresses/{shippingAddressId}:
    patch:
      summary: 既存の配送先情報を更新する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/ShippingAddressIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/ShippingAddressRequest'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: 既存の配送先情報を削除する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/ShippingAddressIdInPath'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/shipping-addresses/active:
    get:
      summary: アクティブな配送先を取得する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '200':
          $ref: '#/components/responses/ActiveShippingAddressesResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/products/{productId}:
    get:
      summary: 商品の詳細情報を取得する。
      parameters:
        - $ref: '#/components/parameters/ProductIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/ProductDetailsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      summary: 既存の商品情報を更新する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/ProductIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/ProductDetailsRequest'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
    delete:
      summary: 指定された商品IDに対応する商品を削除する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/ProductIdInPath'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/products:
    post:
      summary: 新しい商品を出品する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      requestBody:
        $ref: '#/components/requestBodies/ProductDetailsRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/products/{productId}/reviews:
    post:
      summary: 商品に対するレビューを投稿する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
        - $ref: '#/components/parameters/ProductIdInPath'
      requestBody:
        $ref: '#/components/requestBodies/ReviewRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/search:
    get:
      summary: 検索キーワードに基づいて商品を検索する。
      parameters:
        - $ref: '#/components/parameters/KeywordQueryParam'
      responses:
        '200':
          $ref: '#/components/responses/ProductsResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/search/history:
    get:
      summary: ユーザーの過去の検索履歴を取得する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '200':
          $ref: '#/components/responses/SearchHistoryResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/search/history/{searchHistoryId}:
    get:
      summary: 過去の検索履歴IDに基づいて商品を検索する。
      parameters:
        - $ref: '#/components/parameters/SearchHistoryIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/ProductsResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/search/filtered:
    get:
      summary: 検索キーワードと絞り込み条件に基づいて商品を検索する。
      parameters:
        - $ref: '#/components/parameters/ExcludeKeywordQueryParam'
        - $ref: '#/components/parameters/AgeQueryParam'
        - $ref: '#/components/parameters/WeightQueryParam'
        - $ref: '#/components/parameters/HeightQueryParam'
        - $ref: '#/components/parameters/CategoryQueryParam'
        - $ref: '#/components/parameters/BrandQueryParam'
        - $ref: '#/components/parameters/ProductConditionQueryParam'
        - $ref: '#/components/parameters/ColorQueryParam'
        - $ref: '#/components/parameters/ShippingFeeResponsibilityQueryParam'
        - $ref: '#/components/parameters/ShippingMethodQueryParam'
        - $ref: '#/components/parameters/MaxPriceQueryParam'
        - $ref: '#/components/parameters/MinPriceQueryParam'
      responses:
        '200':
          $ref: '#/components/responses/ProductsResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/search/category/{categoryId}:
    get:
      summary: カテゴリIDに基づいて商品を検索する。
      parameters:
        - $ref: '#/components/parameters/CategoryIdInPath'
      responses:
        '200':
          $ref: '#/components/responses/ProductsResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/search/favorites/list:
    get:
      summary: ユーザーのお気に入り商品の一覧を取得する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '200':
          $ref: '#/components/responses/ProductsResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/favorites/{productId}:
    post:
      summary: ユーザーが商品をお気に入りに追加する。
      parameters:
        - $ref: '#/components/parameters/ProductIdInPath'
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '201':
          $ref: '#/components/responses/CreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      summary: ユーザーが商品をお気に入りに削除する。
      parameters:
        - $ref: '#/components/parameters/ProductIdInPath'
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/productviews/history:
    get:
      summary: ユーザーの閲覧履歴を取得する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '200':
          $ref: '#/components/responses/ProductsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/productviews/{productId}:
    post:
      summary: ユーザーが商品詳細画面に遷移した際に、その情報を記録する。
      parameters:
        - $ref: '#/components/parameters/ProductIdInPath'
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '201':
          $ref: '#/components/responses/CreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/transactions/start:
    post:
      summary: 新しい取引を開始する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      requestBody:
        $ref: '#/components/requestBodies/TransactionRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/transactions/{transactionId}:
    get:
        summary: 取引の状況を取得する。
        parameters:
          - $ref: '#/components/parameters/TransactionIdInPath'
          - $ref: '#/components/parameters/SessionIdInHeader'
        responses:
          '200':
            $ref: '#/components/responses/TransactionResponse'
          '400':
            $ref: '#/components/responses/BadRequestError'
    patch:
      summary: 取引の状況を更新する。
      parameters:
        - $ref: '#/components/parameters/TransactionIdInPath'
        - $ref: '#/components/parameters/SessionIdInHeader'
      requestBody:
        $ref: '#/components/requestBodies/TransactionStatusRequest'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/transactions/history:
    get:
      summary: ユーザーが購入または出品した商品の取引履歴を取得する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '200':
          $ref: '#/components/responses/TransactionsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/transactions/{transactionId}/evaluations:
    post:
      summary: 取引に対する評価を投稿する。
      parameters:
        - $ref: '#/components/parameters/TransactionIdInPath'
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      requestBody:
        $ref: '#/components/requestBodies/EvaluationRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/points/current:
    get:
      summary: 現在のポイント数を取得する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '200':
          $ref: '#/components/responses/CurrentPointsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/points/charge:
    post:
      summary: 指定された金額でユーザーのポイントをチャージする。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      requestBody:
          $ref: '#/components/requestBodies/ChargePointsRequest'
      responses:
        '201':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  /api/points/history:
    get:
      summary: ユーザーのポイント履歴（取引による増減履歴とチャージ履歴）を取得する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '200':
          $ref: '#/components/responses/PointsHistoryResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/notices:
    get:
      summary: 認証されたユーザーのすべての通知を取得する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '200':
          $ref: '#/components/responses/NotificationsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/notices/unread-exists:
    get:
      summary: ユーザーの未読通知の有無を確認する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '200':
          $ref: '#/components/responses/UnreadExistsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/notices/mark-all-read:
    patch:
      summary: ユーザーの未読通知を全て既読に更新する。
      parameters:
        - $ref: '#/components/parameters/SessionIdInHeader'
        - $ref: '#/components/parameters/UserIdInHeader'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  parameters:
    UserIdInPath:
      description: URLに含めるユーザーID
      name: userId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/userId'

    ShippingAddressIdInPath:
      description: URLに含める配送先ID
      name: shippingAddressId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/shippingAddressId'

    ProductIdInPath:
      description: URLに含める商品ID
      name: productId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/productId'

    SearchHistoryIdInPath:
      description: URLに含める検索履歴ID
      name: searchHistoryId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/searchHistoryId'

    CategoryIdInPath:
      description: URLに含めるカテゴリID
      name: categoryId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/codeMasterId'

    TransactionIdInPath:
      description: URLに含める取引ID
      name: transactionId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/transactionId'

    SessionIdInHeader:
      description: リクエストヘッダに含めるセッションID
      in: header
      name: sessionId
      required: true
      schema:
        $ref: '#/components/schemas/sessionId'

    UserIdInHeader:
      description: リクエストヘッダに含めるユーザーID
      in: header
      name: userId
      required: true
      schema:
        $ref: '#/components/schemas/userId'

    KeywordQueryParam:
      description: クエリパラメータに含めるキーワード
      in: query
      name: keyword
      schema:
        $ref: '#/components/schemas/keyword'

    ExcludeKeywordQueryParam:
      description: クエリパラメータに含める除外キーワード
      in: query
      name: excludeKeyword
      schema:
        $ref: '#/components/schemas/keyword'

    AgeQueryParam:
      description: クエリパラメータに含める月齢
      in: query
      name: ages
      schema:
        type: array
        items:
          $ref: '#/components/schemas/codeMasterId'
      style: form
      explode: true
    
    WeightQueryParam:
      description: クエリパラメータに含める体重
      in: query
      name: weights
      schema:
        type: array
        items:
          $ref: '#/components/schemas/codeMasterId'
      style: form
      explode: true
    
    HeightQueryParam:
      description: クエリパラメータに含める身長
      in: query
      name: heights
      schema:
        type: array
        items:
          $ref: '#/components/schemas/codeMasterId'
      style: form
      explode: true
    
    CategoryQueryParam:
      description: クエリパラメータに含めるカテゴリ
      in: query
      name: categories
      schema:
        type: array
        items:
          $ref: '#/components/schemas/codeMasterId'
      style: form
      explode: true
    
    BrandQueryParam:
      description: クエリパラメータに含めるブランド
      in: query
      name: brands
      schema:
        type: array
        items:
          $ref: '#/components/schemas/codeMasterId'
      style: form
      explode: true

    ProductConditionQueryParam:
      description: クエリパラメータに含める商品の状態
      in: query
      name: productConditions
      schema:
        type: array
        items:
          $ref: '#/components/schemas/codeMasterId'
      style: form
      explode: true

    ColorQueryParam:
      description: クエリパラメータに含める色
      in: query
      name: colors
      schema:
        type: array
        items:
          $ref: '#/components/schemas/colorId'
      style: form
      explode: true

    ShippingFeeResponsibilityQueryParam:
      description: クエリパラメータに含める配送料の負担
      in: query
      name: shippingFeeResponsibilities
      schema:
        type: array
        items:
          $ref: '#/components/schemas/codeMasterId'
      style: form
      explode: true

    ShippingMethodQueryParam:
      description: クエリパラメータに含める発送オプション
      in: query
      name: shippingMethods
      schema:
        type: array
        items:
          $ref: '#/components/schemas/codeMasterId'
      style: form
      explode: true

    MaxPriceQueryParam:
      description: クエリパラメータに含める上限価格
      in: query
      name: maxPrice
      schema:
        $ref: '#/components/schemas/price'

    MinPriceQueryParam:
      description: クエリパラメータに含める下限価格
      in: query
      name: minPrice
      schema:
        $ref: '#/components/schemas/price'

  requestBodies: 
    PersonalUserInfoRequest:
      description: 個人情報更新情報
      required: true
      content:
        application/json: 
          schema: 
            $ref: '#/components/schemas/personalUserInfo'

    ProfileUserInfoRequest:
      description: プロフィール情報更新情報
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/profileUserInfo'

    LoginRequest:
      description: ログインリクエスト情報
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/loginInfo'

    SignupRequest:
      description: サインアップリクエスト情報
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/signupInfo'

    CredentialRequest:
      description: メールアドレス・パスワード更新情報
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/credentialRequestInfo'

    ShippingAddressRequest:
      description: 新規配送先情報
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/shippingAddress'

    ProductDetailsRequest:
      description: 商品詳細更新情報
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/productDetailsRequestInfo'

    ReviewRequest:
      description: レビュー投稿情報
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/reviewRequest'

    TransactionRequest:
      description: 取引開始時情報
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transactionRequestInfo'

    TransactionStatusRequest:
      description: 取引更新時情報
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transactionStatusRequestInfo'

    EvaluationRequest:
      description: 取引評価情報
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/evaluationRequestInfo'

    ChargePointsRequest:
      description: ユーザーがチャージするポイント数情報
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/chargePointsInfo'

  responses: 
    MypageResponse:
      description: プロフィール情報
      content:
        application/json:
          schema:
            type: object
            properties:
              userId:
                $ref: '#/components/schemas/userId'
              profile:
                $ref: '#/components/schemas/profileUserInfoWithRating'
              products:
                $ref: '#/components/schemas/products'

    PersonalUserInfoResponse:
      description: プロフィール情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/personalUserInfo'

    ProfileUserInfoResponse:
      description: プロフィール情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/profileUserInfo'

    LoginResponse:
      description: ログイン成功情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/loginSuccessInfo'
    
    AllShippingAddressesResponse:
      description: ユーザーの登録されているすべての配送先情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/shippingAddresses'

    ActiveShippingAddressesResponse:
      description: ユーザーの登録されているアクティブ配送先情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/shippingAddressWithId'

    ProductsResponse:
      description: 商品の一覧情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/products'

    ProductDetailsResponse:
      description: 商品の詳細情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/productDetailsResponseInfo'

    SearchHistoryResponse:
      description: ユーザーの検索履歴情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/searchHistories'

    TransactionResponse:
      description: 商品の取引情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transactionDisplay'

    TransactionsResponse:
      description: ユーザーの取引履歴情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transactions'

    CurrentPointsResponse:
      description: ユーザーの現在のポイント残高情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/currentPointsInfo'

    PointsHistoryResponse:
      description: ユーザーのポイント履歴情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/pointHistories'

    NotificationsResponse:
      description: ユーザーのお知らせ情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/notifications'

    UnreadExistsResponse:
      description: 未読通知の有無情報
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/unreadExistsInfo'

    CreatedResponse:
      description: リクエストに成功して、正常に作成されました(201)

    NoContentResponse:
      description: リクエストが成功しましたが、返すべき内容はありません(204)

    BadRequestError:
      description: リクエストが不正または間違っています(400)

    UnauthorizedError:
      description: 認証に失敗しました(401)
    
    NotFoundError:
      description: リソースが見つからない(404)

    InternalServerError:
      description: サーバー内部エラー(500)

    # 他のスキーマも同様に定義...

  schemas:
    # 共通のデータ構造
    sessionId:
      type: string
      description: セッションID
    
    userId:
      type: integer
      format: int32
      description: ユーザーID

    nickname:
      type: string
      description: ニックネーム

    password:
      type: string
      format: password
      description: パスワード

    email:
      type: string
      format: email
      description: メールアドレス

    imagePath:
      type: string
      description: 画像パス
    
    introduce:
      type: string
      description: 自己紹介

    shippingAddressId:
      type: integer
      format: int32
      description: 配送先ID

    productId:
      type: integer
      format: int64
      description: 商品ID
    
    productName:
      type: string
      description: 商品名

    price:
      type: integer
      minimum: 0
      description: 価格

    isFlag:
      type: boolean
      description: かどうか

    date-time:
      type: string
      format: date-time

    codeMasterId:
      type: integer
      format: int32
      description: コードマスタID

    codeMasterName:
      type: string
      description: コードマスタ名

    keyword:
      type: string
      description: 検索キーワード

    searchHistoryId:
      type: integer
      format: int64
      description: 検索履歴ID

    transactionId:
      type: integer
      format: int64
      description: 取引ID

    comment:
      type: string
      description: コメント

    score:
      type: integer
      maximum: 5
      minimum: 1
      description: 評価値

    points:
      type: integer
      minimum: 0
      description: ポイント

    colorId:
      type: integer
      format: int32
      description: 色ID

    categoryInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/codeMasterId'
          description: カテゴリID
        name:
          $ref: '#/components/schemas/codeMasterName'
          description: カテゴリ名

    colorInfo:
      type: object
      properties:
        colorId:
          $ref: '#/components/schemas/colorId'
          description: 色ID
        name:
          type: string
          description: 色名
        colorCode:
          type: string
          description: 色コード

    personalUserInfo:
      type: object
      properties:
        name:
          type: string
          description: 氏名
        nameKana:
          type: string
          description: 氏名(カタカナ)
        birthday:
          type: string
          format: date
          description: 誕生日
        address:
          type: string
          description: 住所

    profileUserInfo:
        type: object
        properties:
          profileImage:
            $ref: '#/components/schemas/imagePath'
          nickname:
            $ref: '#/components/schemas/nickname'

    profileUserInfoWithIntroduce:
      type: object
      properties:
          profileImage:
            $ref: '#/components/schemas/imagePath'
          nickname:
            $ref: '#/components/schemas/nickname'
          introduce:
            $ref: '#/components/schemas/introduce'

    averageRating:
      type: object
      properties:
        averageRating:
          type: number
          format: float
          description: 平均取引評価値

    profileUserInfoWithRating:
      allOf: 
        - $ref: '#/components/schemas/profileUserInfoWithIntroduce'
        - $ref: '#/components/schemas/averageRating'

    loginInfo:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'

    loginSuccessInfo:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/userId'
        sessionId:
          $ref: '#/components/schemas/sessionId'

    signupInfo:
      allOf:
        - $ref: '#/components/schemas/loginInfo'
        - type: object
          properties:
            nickname:
              $ref: '#/components/schemas/nickname'

    credentialRequestInfo:
      type: object
      properties:
        currentPassword:
          $ref: '#/components/schemas/password'
          description: 現在のパスワード
        newEmail:
          $ref: '#/components/schemas/email'
          description: 更新用メールアドレス
        newPassword:
          $ref: '#/components/schemas/password'
          description: 更新用パスワード
        confirmNewPassword:
          $ref: '#/components/schemas/password'
          description: 更新用パスワード（再確認）

    shippingAddress:
      type: object
      properties:
        sei:
          type: string
          description: 姓
        mei:
          type: string
          description: 名
        seiKana:
          type: string
          description: 姓のカナ
        meiKana:
          type: string
          description: 名のカナ
        postCode:
          type: string
          description: 郵便番号
        prefectures:
          type: string
          description: 都道府県
        municipalities:
          type: string
          description: 市区町村
        street:
          type: string
          description: 番地
        buildingName:
          type: string
          description: 建物名
          nullable: true
        tel:
          type: string
          description: 電話番号

    shippingAddressWithId:
      type: object
      properties:
        shippingAddressId:
            $ref: '#/components/schemas/shippingAddressId'
        shippingAddress:
          $ref: '#/components/schemas/shippingAddress'

    shippingAddresses:
      type: array
      items:
        $ref: '#/components/schemas/shippingAddressWithId'

    product:
      type: object
      properties:
        productName:
          $ref: '#/components/schemas/productName'
          description: 商品名
        productImagePath:
          $ref: '#/components/schemas/imagePath'
          description: 商品画像パス
        price:
          $ref: '#/components/schemas/price'
          description: 価格
        isSold:
          $ref: '#/components/schemas/isFlag'
          description: 商品が売れたかどうか
        date:
          $ref: '#/components/schemas/date-time'
          description: 出品時刻

    productWithId:
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/productId'
        product:
          $ref: '#/components/schemas/product'

    productWithIdAndInProgress:
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/productId'
        product:
          $ref: '#/components/schemas/product'
        isInProgress:
          $ref: '#/components/schemas/isFlag'

    products:
      type: array
      items:
        $ref: '#/components/schemas/productWithId'

    productInfo:
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/productId'
        productName:
          productName:
          $ref: '#/components/schemas/productName'
          description: 商品名
        productImagePath:
          $ref: '#/components/schemas/imagePath'
          description: 商品画像パス

    image:
     type: object
     properties:
       path:
        type: string
        description: 商品画像パス
       order:
        type: integer
        description: 並び順
    
    images:
      type: array
      items:
        $ref: '#/components/schemas/image'

    itemAttributes:
      type: object
      properties:
        age:
          $ref: '#/components/schemas/codeMasterName'
          description: 月齢
        height:
          $ref: '#/components/schemas/codeMasterName'
          description: 身長
        weight:
          $ref: '#/components/schemas/codeMasterName'
          description: 体重
        brand:
          $ref: '#/components/schemas/codeMasterName'
          description: ブランド
        majorCategory:
          $ref: '#/components/schemas/categoryInfo'
        minorCategory:
          $ref: '#/components/schemas/categoryInfo'
        color:
          $ref: '#/components/schemas/colorInfo'
          description: 色
        condition:
          $ref: '#/components/schemas/codeMasterName'
          description: 状態

    itemAttributeIds:
      type: object
      properties:
        age:
          $ref: '#/components/schemas/codeMasterId'
          description: 月齢
        height:
          $ref: '#/components/schemas/codeMasterId'
          description: 身長
        weight:
          $ref: '#/components/schemas/codeMasterId'
          description: 体重
        brand:
          $ref: '#/components/schemas/codeMasterId'
          description: ブランド
        majorCategory:
          $ref: '#/components/schemas/categoryInfo'
        minorCategory:
          $ref: '#/components/schemas/categoryInfo'
        color:
          $ref: '#/components/schemas/codeMasterId'
          description: 色
        condition:
          $ref: '#/components/schemas/codeMasterId'
          description: 状態

    shippingDetails:
      type: object
      properties:
        shippingFeeResponsibility:
          $ref: '#/components/schemas/codeMasterName'
          description: 配送料の負担
        shippingMethod:
          $ref: '#/components/schemas/codeMasterName'
          description: 配送の方法
        shippingOriginRegion:
          $ref: '#/components/schemas/codeMasterName'
          description: 配送元の地域
        dayToShip:
          $ref: '#/components/schemas/codeMasterName'
          description: 配送までの日数

    shippingDetailIds:
      type: object
      properties:
        shippingFeeResponsibility:
          $ref: '#/components/schemas/codeMasterId'
          description: 配送料の負担
        shippingMethod:
          $ref: '#/components/schemas/codeMasterId'
          description: 配送の方法
        shippingOriginRegion:
          $ref: '#/components/schemas/codeMasterId'
          description: 配送元の地域
        dayToShip:
          $ref: '#/components/schemas/codeMasterId'
          description: 配送までの日数

    sellerInfo:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/userId'
        nickname:
          $ref: '#/components/schemas/nickname'
        profileImagePath:
          $ref: '#/components/schemas/imagePath'

    sellerInfoWithRating:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/userId'
        nickname:
          $ref: '#/components/schemas/nickname'
        profileImagePath:
          $ref: '#/components/schemas/imagePath'
        averageRating:
          $ref: '#/components/schemas/averageRating'

    buyerInfo:
      type: object
      properties:
        name:
          type: string
          description: 氏名
        address:
          type: string
          description: 住所

    reviewResponse:
      type: object
      properties:
        rating:
          $ref: '#/components/schemas/score'
          description: 評価値
        usageDuration:
          $ref: '#/components/schemas/codeMasterName'
          description: 使用期間
        comment:
          $ref: '#/components/schemas/comment'
          description:  レビューコメント

    reviewRequest:
      type: object
      properties:
        rating:
          $ref: "#/components/schemas/score"
          description: 評価値
        usageDuration:
          $ref: '#/components/schemas/codeMasterName'
          description: 使用期間
        comment:
          $ref: "#/components/schemas/comment"
          description: レビューコメント

    reviews:
      type: array
      items:
        $ref: '#/components/schemas/reviewResponse'

    productDetailsResponseInfo:
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/productId'
          description: 商品ID
        images:
          $ref: '#/components/schemas/images'
          description: 画像リスト
        productName:
          $ref: '#/components/schemas/productName'
          description: 商品名
        productDescription:
          type: string
          description: 商品説明
        price:
          $ref: '#/components/schemas/price'
          description: 価格
        itemAttributes:
          $ref: '#/components/schemas/itemAttributes'
          description: 商品の詳細
        shippingDetails:
          $ref: '#/components/schemas/shippingDetails'
          description: 配送について
        isLiked:
          $ref: '#/components/schemas/isFlag'
          description: いいね！かどうか
        isSold:
          $ref: '#/components/schemas/isFlag'
          description: 売れたかどうか
        isSeller:
          $ref: '#/components/schemas/isFlag'
          description: 出品者かどうか
        isBuyer:
          $ref: '#/components/schemas/isFlag'
          description: 購入者かどうか
        seller:
          $ref: '#/components/schemas/sellerInfoWithRating'
          nullable: true
          description: 出品者情報
        reviews:
          $ref: '#/components/schemas/reviews'
          nullable: true
          description: レビューリスト

    productDetailsRequestInfo:
      type: object
      properties:
        images:
          $ref: '#/components/schemas/images'
          description: 画像リスト
        productName:
          $ref: '#/components/schemas/productName'
          description: 商品名
        productDescription:
          type: string
          description: 商品説明
        price:
          $ref: '#/components/schemas/price'
          description: 価格
        itemAttributes:
          $ref: '#/components/schemas/itemAttributeIds'
          description: 商品の詳細
        shippingDetails:
          $ref: '#/components/schemas/shippingDetailIds'
          description: 配送について

    searchHistory:
      type: object
      properties:
        searchHistoryId:
          $ref: '#/components/schemas/searchHistoryId'
          description: 検索履歴ID
        keyword:
          $ref: '#/components/schemas/keyword'
          description: キーワード

    searchHistories:
      type: array
      items:
        $ref: '#/components/schemas/searchHistory'

    transactionRequestInfo:
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/productId'

    transactionStatusRequestInfo:
      type: object
      properties:
        statusType:
          type: string
          enum: [shipping, receipt]

    transactionDisplay:
      type: object
      properties:
        transactionStatusId:
          $ref: '#/components/schemas/codeMasterId'
          description: 取引ステータスID
        sellerInfo:
          $ref: '#/components/schemas/sellerInfo'
          description: 出品者情報
        productInfo:
          $ref: '#/components/schemas/productInfo'
          description: 商品情報
        transactionInfo:
          $ref: '#/components/schemas/transactionInfo'
          description: 取引情報
        buyerInfo:
          $ref: '#/components/schemas/buyerInfo'
          description: 購入者情報
          nullable: true
        evaluationInfo:
          $ref: '#/components/schemas/evaluationInfo'
          description: 評価情報
          nullable: true

    transactionInfo:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/price'
        shippingFeeResponsibility:
          $ref: '#/components/schemas/codeMasterName'
          description: 配送料の負担
        date:
          $ref: '#/components/schemas/date-time'
          description: 取引日時
        productId:
          $ref: '#/components/schemas/productId'
          description: 商品ID

    transactionHistoryInfo:
      type: object
      properties:
        transactionId:
          $ref: '#/components/schemas/transactionId'
        product:
          $ref: '#/components/schemas/productWithIdAndInProgress'
        isBuyer:
          $ref: '#/components/schemas/isFlag'

    transactions:
      type: array
      items:
        $ref: '#/components/schemas/transactionHistoryInfo'

    evaluationInfo:
      type: object
      properties:
        nickname:
          $ref: '#/components/schemas/nickname'
        comment:
          $ref: '#/components/schemas/comment'
          description: 取引コメント
        score:
         $ref: '#/components/schemas/score'
         description: 評価値

    evaluationRequestInfo:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/comment'
          description: 取引コメント
        score:
         $ref: '#/components/schemas/score'
         description: 評価値

    currentPointsInfo:
      type: object
      properties:
        currentPoints:
          $ref: '#/components/schemas/points'
          description: 現在のポイント数

    chargePointsInfo:
      type: object
      properties:
        chargePoints:
          $ref: '#/components/schemas/points'
          description: チャージするポイント数

    pointHistory:
      type: object
      properties:
        type:
          type: string
          enum: [charge, transaction]
          description: ポイント種別
        points:
          $ref: '#/components/schemas/points'
          description: ポイント数
        isPlus:
          $ref: '#/components/schemas/isFlag'
          description: プラスかどうか
        date:
          $ref: '#/components/schemas/date-time'
          description: 取引日時
        transactionId:
          $ref: '#/components/schemas/transactionId'
          nullable: true
          description: 取引ID
        productName:
          $ref: '#/components/schemas/productName'
          nullable: true
          description: 商品名

    pointHistories:
      type: array
      items:
        $ref: '#/components/schemas/pointHistory'

    notification:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: お知らせID
        title:
          type: string
          description: お知らせタイトル
        message:
          type: string
          description: お知らせ
        createAt:
          $ref: '#/components/schemas/date-time'
          description: 作成日時
        isRead:
          $ref: '#/components/schemas/isFlag'
          description: 既読かどうか

    notifications:
      type: array
      items:
        $ref: '#/components/schemas/notification'

    unreadExistsInfo:
      type: object
      properties:
        unreadExists:
          $ref: '#/components/schemas/isFlag'
          description: 未読通知があるかどうか